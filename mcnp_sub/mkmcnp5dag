#! /usr/bin/env perl
use Getopt::Long;
use Cwd;
use Time::Local;
use strict;
use warnings;

my %projects = ( );

my(%VALID_TYPES) = map {ucfirst(lc($_))=>1} qw(R Matlab Other);

my ($shallow, $maxidle, $help, $rundir, $data, $memory, $resultdir, $jobscripts);

if( ! GetOptions(
        'help' => \$help,
		'data=s' => \$data,
		'jobscripts=s' => \$jobscripts,
		'maxidle=i' => \$maxidle,
		'memory=s' => \$memory,
		'resultdir=s' => \$resultdir,
		'rundir=s' => \$rundir,)) {
	die "\n"; # GetOptions already reported an error.
}

# Where is mcnp5
my $top = getcwd();


if(!(defined $jobscripts)) {
	help();
	exit(1)
}

$jobscripts = "$top/$jobscripts";

open(DP,"$jobscripts/DATAPATH") or die "Can't open jobs/DATAPATH\n";

my $datapath = <DP>;
chomp($datapath);
print "DATAPATH = <$datapath>\n";
my $Partial = "";
if($datapath =~ /^datapath\s*=\s*(.*)$/) {
	$Partial = $1;
	print "Partial <$Partial>\n";
} else {
	print "Can't parse Mcnp5 locationo from <$datapath>\n"; 
}
print "$datapath\n";

my $MCNP5location = $datapath;
$ENV{DATAPATH}="$MCNP5location/mcnp5/data";
$ENV{PATH}="$MCNP5location/mcnp5/bin:$ENV{PATH}";

if(@ARGV) {
	help();
	my $s = '';
	$s = 's' if @ARGV != 1;
	die "Unknown argument$s found on command line: @ARGV\n";
}

if(defined $help) {
	help();
	print "help asked for\n";
	exit(0);
}

if(!(defined $data)) {
	help();
	die "Have no idea what to use for job data. need --data=xxxx\n";
}

if(!(defined $rundir)) {
	help();
	print "Need directory to create!\n";
	die "Must use --outputdir=xxxxxxxxx\n";
}

if(!(-d "$data")) {
	help();
	die "Can not find data location<$data>\n";
}


my $unique = $rundir;
my $unique_dag = $unique . "_dag";
my $cwd = getcwd();
my $inputpath = "";
my $buildloc = "";
my $dagfile = "mydag.dag";
my $dagpath = "";
my $dagconfig = "";
my $sharedexists = 0;
my $jobtemplate = "";
my $prejobtemplate = "";
my $finalmergetemplate = "";
my $jobsubmitfile = "";
my $jobfolder = "";

$inputpath = "$cwd/$data";
$buildloc = "$cwd/$rundir";
$dagpath = "$buildloc/$dagfile";
$dagconfig = "$buildloc/dagman_config";

$jobtemplate = "$cwd/mcnp5.template";
$prejobtemplate = "$cwd/premcnp5.template";
$finalmergetemplate = "$cwd/finalmerge.template";


print "Path to input folders is \"$inputpath\"\n";
print "Path to output folders is \"$buildloc\"\n";
#print "Currently here <$cwd>\n";

if(!(-d "$rundir")) {

	my $dir = ".";
	my $ret = 0;

	$ret = system("mkdir $buildloc");
	if($ret != 0) {
		die "Can not make output folder<$buildloc>\n";
	}

	my $uniqeindex = -1;
	# allow for faster submits for big runs AND a maximum of idle jobs
	open(DF,">$dagpath") or die "Can not create DAG<$dagpath>: $!\n";
	open(FIG,">$dagconfig") or die "Can not create DAG config file<$dagconfig>: $!\n";
	print DF "CONFIG dagman_config\n";
	if(defined $maxidle) {
		print "Thank you for limiting your idle jobs in the queue!\n";
		print "We suggest no more then 5000 idle jobs per user\n";
		if($maxidle > 500) {
			print FIG "DAGMAN_MAX_SUBMITS_PER_INTERVAL = 100\n";
			# default is 10
		}
		print FIG "DAGMAN_MAX_JOBS_IDLE = $maxidle\n";
	} else {
		print FIG "DAGMAN_MAX_JOBS_IDLE = 1000\n";
	}
	close(FIG);


} else {
	die "DAG working directory \"$rundir\" already exists. Choose a different destination.\n";
}

MakeDagNodes( $rundir, $data );
MakeSubmitFiles( $rundir, $data );
  

chdir("$rundir");
system("condor_submit_dag --MaxPre 4 $dagfile");

print "All done!\n";
exit(0);

#	        'help' => \$help,
#			'data=s' => \$data,
#			'jobscripts=s' => \$jobscripts,
#			'maxidle=i' => \$maxidle,
#			'memory=s' => \$memory,
#			'resultdir=s' => \$resultdir,
#			'rundir=s' => \$rundir,)) {

sub help {

		print "Usage:

./mkmcnp5dag --data=Rin --rundir=dir1 --jobscripts=alocationtoJOBS 

Options:
                [-h/--help]          This documentation
                [--data=s]           Input directory
                [--rundir=s]      	 run directory
		[--memory=s]         --memory=3000  means I need at least 3 gigs of 
				                     ram per job
                [--jobscripts=s]     location of scripts
                [--maxidle=i]        Limit idle jobs in queue and up how fast jobs
                                     are submited by factor or 10. For large runs
                                     we'd like no more then a total of 5000 idle jobs per
                                     user.
         \n";

}

# Compares filenames for sorting purposes
sub cmp_filenames {
	my($a, $b) = @_;
	return $a cmp $b;
}


sub MakeSubmitFiles
{
	my $rundir= shift;
	my $datadir = shift;

	my $widthfile = "$datadir/mcnp_args";

	print "make_job_submits: $jobscripts $datadir $rundir \n";
	if(!(-f "$widthfile")) {
		die "Failed to find parallelism directive file<$datadir/num_subprocess.txt>\n";
	}

	my $count = 0;
	my $output = "";
	my $restart = "";
	my $input = "";
	my $mctal = "";
	my $meshtal = "";
	my $line = "";
	my $pieces = 0;
	open(NS,"<$widthfile") or die "Can read width count from<$widthfile>:$!\n";
	while(<NS>) {
		chomp();
		$line = $_;
		if($line =~ /^number\s*=\s*(\d+)$/) {
			$pieces = $1;
			print "There will be a parallelism of<$pieces>\n";
		} elsif($line =~ /^input\s*=\s*(.*)\s*$/) {
			$input=$1;
		} elsif($line =~ /^restart\s*=\s*(.*)\s*$/) {
			$restart=$1;
		} elsif($line =~ /^output\s*=\s*(.*)\s*$/) {
			$output=$1;
		} elsif($line =~ /^mctal\s*=\s*(.*)\s*$/) {
			$mctal=$1;
		} elsif($line =~ /^meshtal\s*=\s*(.*)\s*$/) {
			$meshtal=$1;
		}
	}
	close NS;

	#This node secures input and does sanity screening
	open(TEMP,"<$jobscripts/preinitcond.template") or die "Can not read template<$jobscripts/preinitcond.template>:$!\n";
	open(SUBM,">$rundir/preinitcond.cmd") or die "Can not write submit file<$rundir/preinitcond.cmd>:$!\n"; 
	print "Just created <$rundir/preinitcond.cmd>\n";
	$line = "";
	while(<TEMP>) {
		chomp;
		$line = $_;	
		print "$_\n";
		if($line =~ /^executable\s+=\s+XXX.*$/) {
			print SUBM "executable = $jobscripts/preinitcond.pl\n";
		}elsif($line =~ /^arguments\s+=\s+XXX.*$/) {
			print SUBM "arguments = $jobscripts\n";
		} else {
			print SUBM "$line\n";
		}
	}
	close(TEMP);
	close(SUBM);

	print "About to make remote job submit files for <$unique>\n";
	$count = 1;
	print "Starting: count = $count/pieces = $pieces\n";
	while($count < ($pieces + 1)) {
		print "count = $count/pieces = $pieces\n";
		my $goal = "$unique$count.mat";
		print "<<<$goal>>>\n";
		open(TEMP,"<$jobscripts/mcnp5.template") 
				or die "Can not read template<$jobscripts/mcnp5.template>:$!\n";
		open(SUBM,">$rundir/mcnp5.$count.cmd") 
				or die "Can not write submit file<$rundir/mcnp5.$count.cmd>:$!\n"; 
		print "Just created <$rundir/mcnp5.$count.cmd>\n";
		$line = "";
		while(<TEMP>) {
			chomp;
			$line = $_;	
			print "$_";
			if($line =~ /^executable\s+=\s+(.*)/) {
				print SUBM "executable = $Partial$1\n";
			}elsif($line =~ /^arguments\s+=\s+.*/) {
				if(($mctal ne "") && ($meshtal ne "")) {
					print SUBM "arguments = c i=$input.$count.cont o=$output.$count ru=$restart.$count mctal=$mctal.$count mesh=$meshtal.$count\n";
				} else {
					print SUBM "arguments = c i=$input.$count.cont o=$output.$count ru=$restart.$count \n";
				}
			}elsif($line =~ /^output\s+=\s+.*/) {
				print SUBM "output = domcnp5.$count.out\n";
			}elsif($line =~ /^error\s+=\s+.*/) {
				print SUBM "error = domcnp5.$count.err\n";
			}elsif($line =~ /^log\s+=\s+.*/) {
				print SUBM "log = domcnp5.$count.log\n";
			}elsif($line =~ /^transfer_input_files\s+=.*/) {
				print "restart<$restart> mctal<$mctal> meshtal<$meshtal>\n";
				if($restart ne "") { 
					if($mctal ne "") { print "MCTAL<$mctal>\n" };
					if($meshtal ne "") { print "MESHTAL<$meshtal>\n" };
					print SUBM "transfer_input_files = $input.$count.cont,$restart.$count\n";
				} else {
					print SUBM "transfer_input_files = $input.$count\n";
				}
			} else {
				print SUBM "$line\n";
			}
		}
		close(TEMP);
		close(SUBM);

		$count += 1;
	}

	if(defined $meshtal) {
		open(TEMP,"<$jobscripts/finalmerge.template") or die "Can not read template<$jobscripts/finalmerge.template>:$!\n";
		open(SUBM,">$rundir/finalmerge.cmd") or die "Can not write submit file<$rundir/finalmerge.cmd>:$!\n"; 
		print "Just created <$rundir/finalmerge.cmd>\n";
		$line = "";
		while(<TEMP>) {
			chomp;
			$line = $_;	
			print "$_";
			if($line =~ /^arguments\s+=\s+.*/) {
				print SUBM "arguments = $pieces $mctal $meshtal $jobscripts\n";
			} elsif($line =~ /^executable\s+=.*$/) {
				print SUBM "executable = $jobscripts/finalmerge.pl\n";
			} else {
				print SUBM "$line\n";
			}
		}
		close(TEMP);
		close(SUBM);
	}

	return(0);
}

sub MakeDagNodes
{
	my $rundir= shift;
	my $datadir = shift;

	my $initthrottle = 10;
	my $unique = "$rundir";


	my $widthfile = "$datadir/mcnp_args";
	# place config file in run location
	system("cp $datadir/* $rundir");

	print "MakeDagNodes: $rundir $datadir $widthfile\n";
	if(!(-f "$widthfile")) {
		system("ls $datadir");
		die "Failed to find parallelism directive file<$datadir/mcnp_args>\n";
	}

	my $output = "";
	my $restart = "";
	my $input = "";
	my $mctal = "";
	my $meshtal = "";
	my $line = "";
	my $pieces = 0;
	open(NS,"<$widthfile") or die "Can read width count from<$widthfile>:$!\n";
	while(<NS>) {
		chomp();
		$line = $_;
		if($line =~ /^number\s*=\s*(\d+)\s*$/) {
			$pieces = $1;
			print "There will be a parallelism of<$pieces>\n";
		} elsif($line =~ /^input\s*=\s*(.*)\s*$/) {
			$input=$1;
		} elsif($line =~ /^restart\s*=\s*(.*)\s*$/) {
			$restart=$1;
		} elsif($line =~ /^output\s*=\s*(.*)\s*$/) {
			$output=$1;
		} elsif($line =~ /^mctal\s*=\s*(.*)\s*$/) {
			$mctal=$1;
		} elsif($line =~ /^meshtal\s*=\s*(.*)\s*$/) {
			$meshtal=$1;
		}
	}
	close NS;

	my @children = ();
	my @pre_children = ();
	my $job = "crunch";
	
	
	
	open(SUBM,">$rundir/$dagfile") or die "Can not write submit file<$rundir/$dagfile>:$!\n"; 
	print "Just created <$rundir/$dagfile>\n";

	# 
	# this node will do sanity checks and get the data moved
	# only. The state 0 inits will happen in parallel soon
	my $procparent =  $job = "premcnp5.init";
	print SUBM "JOB $job preinitcond.cmd \n";
	#print SUBM "PRIORITY $job 5\n";
	#print SUBM "SCRIPT PRE $job $jobscripts/prejob.pl \n";
	print SUBM "RETRY $job 1\n";
	my $count= 1;
	my $submit = "";
	my $presubmit = "";
	my $prejob = "";
	# drop out the parallel portion
	while($count < ($pieces + 1)) {
		$job = "mcnp5.$unique" . "_$count";
		$prejob = "premncp5.$unique" . "_$count";
		$submit = "mcnp5" . ".$count" . ".cmd";	
		$presubmit = "premcnp5" . ".$count" . ".cmd";	
		print SUBM "JOB $job $submit \n";
		print SUBM "SCRIPT PRE $job $jobscripts/premcnp5.pl $count\n";
		#print SUBM "JOB $prejob $presubmit DIR $unique\n";
		#print SUBM "PRIORITY $prejob 5\n";
		#print SUBM "PRIORITY $job 2\n";
		print SUBM "RETRY $job 3\n";
		#print SUBM "RETRY $prejob 3\n";
		push @children, $job;
		#push @pre_children, $prejob;
		#print SUBM "PARENT $prejob CHILD $job\n";
		$count += 1;
	}
	#print SUBM "PARENT $procparent CHILD"; 
	#foreach $name (@pre_children) {
		#print SUBM " $name";
	#}
	#print SUBM "\n";

	my $merge = "";
	if($meshtal ne "") {
		$merge = "mncp5.meshmerge";

	 	print SUBM "JOB $merge finalmerge.cmd \n";
		print SUBM "SCRIPT POST $merge $jobscripts/postjob.pl \n";
		print SUBM "RETRY $merge 1\n";

		print SUBM "PARENT";
		foreach my $name (@children) {
			print SUBM " $name";
		}
		print SUBM " CHILD $merge\n"; 
	}

	close(SUBM);

	return(0);
}


